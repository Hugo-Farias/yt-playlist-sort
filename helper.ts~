import {
  CachedPlaylistData,
  countryIs,
  RenderedPlaylistItem,
  YoutubePlaylistResponse,
} from "@/types.ts";
import { videoAPI } from "@/chromeAPI.ts";

export async function fetchJson<T = unknown>(
  input: RequestInfo,
  init?: RequestInit,
): Promise<T> {
  const res = await fetch(input, init);

  if (!res.ok) {
    const errorText = await res.text();
    throw new Error(`Fetch error ${res.status}: ${errorText}`);
  }

  return (await res.json()) as Promise<T>;
}

export const getListId = (url: string) => {
  if (url.length <= 0) return null;
  return new URL(url).searchParams.get("list");
};

export const getVideoId = (url: string): string | null => {
  if (url.length <= 0) return null;
  return new URL(url).searchParams.get("v");
};

export const storeCache = (
  storageKey: "playlistCache" | "renderedCache",
  data: YoutubePlaylistResponse | RenderedPlaylistItem[] | null,
  playlistId: string | null = null,
) => {
  if (!data || !playlistId) return null;

  if (storageKey === "renderedCache") {
    localStorage.setItem(storageKey, JSON.stringify({ [playlistId]: data }));
  } else if (storageKey === "playlistCache") {
    localStorage.setItem(
      storageKey,
      JSON.stringify({
        ...getCache(storageKey, null),
        [playlistId]: { ...data, listId: playlistId, storeTime: Date.now() },
      }),
    );
  }
};

export const comparePlaylist = (
  listA: RenderedPlaylistItem[],
  listB: RenderedPlaylistItem[],
): boolean => {
  if (!listA || !listB) return false;
  if (listA.length !== listB.length) return false;

  const currentIdList = listA.map((item) => item.videoId);

  return currentIdList.every((id, index) => {
    return id === listB[index].videoId;
  });
};

// TODO make this storagekey type determine the return type of the function
type ResultType<T extends string> = T extends "playlistCache" ? CachedPlaylistData : RenderedPlaylistItem[];

export const getCache = <T extends "playlistCache" | "renderedCache">(
  storageKey: T,
  playlistId: string | null,
): ResultType<T> | null => {
  const data = localStorage.getItem(storageKey);
  if (!data) return null;
  if (!playlistId) return JSON.parse(data) as ResultType<T>;
  return JSON.parse(data)[playlistId] as ResultType<T>;
};

const checkVideoAvailability = async (
  videoId: string,
): Promise<boolean | undefined> => {
  const videoInfo = await videoAPI(videoId);
  if (!videoInfo) return false;
  if (!videoInfo.items[0].contentDetails.regionRestriction) return true;

  const { country } = await fetchJson<countryIs>("https://api.country.is/");

  return !videoInfo.items[0].contentDetails.regionRestriction?.blocked?.includes(
    country,
  );
};
