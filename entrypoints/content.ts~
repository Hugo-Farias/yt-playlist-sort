import { MessageType } from "@/entrypoints/background.ts";
import { getPlaylistInfo } from "@/chromeAPI.ts";
import { API_KEY } from "@/config.ts";
import {
  getVideoId,
  checkPlaylist,
  storeApiData,
  getApiData,
} from "@/helper.ts";
import { localPlaylistItem } from "@/types.ts";

let previousURL = "";
let videoItemSelector =
  "ytd-playlist-panel-video-renderer:not([within-miniplayer])";

// noinspection JSUnusedGlobalSymbols
export default defineContentScript({
  main() {
    chrome.runtime.onMessage.addListener((message: MessageType) => {
      if (!message.videoId || !message.listId) return null;
      if (getVideoId(previousURL) === message.videoId) return null;

      previousURL = location.href;
      console.log("content init");

      const video = document.querySelector<HTMLVideoElement>("video");
      if (video) video.pause();

      const playlistItems = [
        ...document.querySelectorAll<HTMLDivElement>(videoItemSelector),
      ].map((el): localPlaylistItem => {
        const titleEl = el.querySelector("#video-title");
        const urlEl = el.querySelector("a");

        return {
          title: titleEl?.textContent ? titleEl?.textContent.trim() : "null",
          videoId: urlEl ? getVideoId(urlEl.href) : "null",
        };
      });

      const apidata = getApiData();

      const check: boolean = checkPlaylist(
        apidata ? apidata.items : null,
        playlistItems,
      );

      if (check) {
        console.log("=>(content.ts:42) apidata", apidata);
      } else {
        getPlaylistInfo(message.listId, API_KEY, true)?.then((data) => {
          if (!data) return null;
          storeApiData(data);
          return data
        });
      }
    });
  },
  matches: ["*://*.youtube.com/*"],
});
